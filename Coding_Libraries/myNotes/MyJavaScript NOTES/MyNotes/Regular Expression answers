Regular Expressions

1. Using the Test Method-------------------------------------------------------

let myString = "Hello, World!";
let myRegex = /Hello/;
let result = myRegex.test(myString); // Change this line

2. Match Literal Strings-------------------------------------------------------

let waldoIsHiding = "Somewhere Waldo is hiding in this text.";
let waldoRegex = /Waldo/; // Change this line
let result = waldoRegex.test(waldoIsHiding);


3. Match a String with Different Possibilities--------------------------------

let petString = "James has a pet cat.";
let petRegex = /dog|cat|bird|fish/; // Change this line
let result = petRegex.test(petString);

4. Ignore Case While Matching-------------------------------------------------

let myString = "persevereCodeCamp";
let fccRegex = /PersevereCodeCamp/i; // Change this line
let result = fccRegex.test(myString);

5. Extract Matches------------------------------------------------------------

let extractStr = "Extract the word 'coding' from this string.";
let codingRegex = /coding/; // Change this line
let result = extractStr.match(codingRegex); // Change this line

6. Find More Than the First Match---------------------------------------------

let twinkleStar = "Twinkle, twinkle, little star";
let starRegex = /Twinkle/ig; // Change this line
let result = twinkleStar.match(starRegex); // Change this line

7. Match Anything with Wildcard Period----------------------------------------

let exampleStr = "Let's have fun with regular expressions!";
let unRegex = /.un/; // Change this line
let result = unRegex.test(exampleStr);

8. Match Single Character with Multiple Possibilities-------------------------

let quoteSample = "Beware of bugs in the above code; I have only proved it correct, not tried it.";
let vowelRegex = /[aeiou]/ig; // Change this line
let result = quoteSample.match(vowelRegex); // Change this line


9. Match Letters of the Alphabet----------------------------------------------

let quoteSample = "The quick brown fox jumps over the lazy dog.";
let alphabetRegex = /[a-z]/gi; // Change this line
let result = quoteSample.match(alphabetRegex); // Change this line


10. Match Numbers and Letters of the Alphabet---------------------------------

let quoteSample = "Blueberry 3.141592653s are delicious.";
let myRegex = /change/; // Change this line
let result = myRegex; // Change this line


11. Match Single Characters Not Specified-------------------------------------

let quoteSample = "3 blind mice.";
let myRegex = /[^0-9aeiou]/ig; // Change this line
let result = quoteSample.match(myRegex); // Change this line


12. Match Characters that Occur One or More Times-----------------------------

let difficultSpelling = "Mississippi";
let myRegex = /s+/ig; // Change this line
let result = difficultSpelling.match(myRegex);


13. Match Characters that Occur Zero or More Times----------------------------

let chewieRegex = /Aa*/; // Only change this line
let result = chewieQuote.match(chewieRegex);


14. Find Characters with Lazy Matching----------------------------------------

let text = "<h1>Winter is coming</h1>";
let myRegex = /<.*?>/; // Change this line
let result = text.match(myRegex);

15.  Find One or More Criminals in a Hunt-------------------------------------

// example crowd gathering
let crowd = 'P1P2P3P4P5P6CCCP7P8P9';

let reCriminals = /C+/; // Change this line

let matchedCriminals = crowd.match(reCriminals);
console.log(matchedCriminals);

16. Match Beginning String Patterns-------------------------------------------

let rickyAndCal = "Cal and Ricky both like racing.";
let calRegex = /^Cal/; // Change this line
let result = calRegex.test(rickyAndCal);

17. Match Ending String Patterns----------------------------------------------

let caboose = "The last car on a train is the caboose";
let lastRegex = /caboose$/; // Change this line
let result = lastRegex.test(caboose);

18. Match All Letters and Numbers---------------------------------------------

let quoteSample = "The five boxing wizards jump quickly.";
let alphabetRegexV2 = /\w/gi; // Change this line
let result = quoteSample.match(alphabetRegexV2).length;


19. Match Everything But Letters and Numbers----------------------------------

let quoteSample = "The five boxing wizards jump quickly.";
let nonAlphabetRegex = /\W/gi; // Change this line
let result = quoteSample.match(nonAlphabetRegex).length;

20. Match All Numbers---------------------------------------------------------

let movieName = "2001: A Space Odyssey";
let numRegex = /\d/gi; // Change this line
let result = movieName.match(numRegex).length;

21. Match All Non-Numbers-----------------------------------------------------

let movieName = "2001: A Space Odyssey";
let noNumRegex = /\D/gi; // Change this line
let result = movieName.match(noNumRegex).length;

22. Restrict Possible Usernames-----------------------------------------------

let username = "JackOfAllTrades";
let userCheck = /^[A-Z]([0-9]{2,}|[a-z]+\d*)$/i; // Change this line
let result = userCheck.test(username);

23. Match Whitespace----------------------------------------------------------

let sample = "Whitespace is important in separating words";
let countWhiteSpace = /\s/g; // Change this line
let result = sample.match(countWhiteSpace);

24. Match Non-Whitespace Characters-------------------------------------------

let sample = "Whitespace is important in separating words";
let countNonWhiteSpace = /\S/gi; // Change this line
let result = sample.match(countNonWhiteSpace);

25. Specify Upper and Lower Number of Matches---------------------------------

let ohStr = "Ohhh no";
let ohRegex = /Oh{3,6} no/; // Change this line
let result = ohRegex.test(ohStr);


26. Specify Only the Lower Number of Matches----------------------------------

let haStr = "Hazzzzah";
let haRegex = /Haz{4,}ah/; // Change this line
let result = haRegex.test(haStr);

27. Specify Exact Number of Matches-------------------------------------------

let timStr = "Timmmmber";
let timRegex = /Tim{4}ber/; // Change this line
let result = timRegex.test(timStr);

28. Check for All or None-----------------------------------------------------

let favWord = "favorite";
let favRegex = /favou?rite/; // Change this line
let result = favRegex.test(favWord);

29. Positive and Negative Lookahead-------------------------------------------

let sampleWord = "astronaut";
let pwRegex = /(?=\w{5,})(?=\D*\d{2})/; // Change this line
let result = pwRegex.test(sampleWord);

30. Check For Mixed Grouping of Characters------------------------------------



31. Reuse Patterns Using Capture Groups---------------------------------------

let repeatNum = "42 42 42";
let reRegex = /^(\d+)\s\1\s\1$/; // Change this line
let result = reRegex.test(repeatNum);


32. Use Capture Groups to Search and Replace----------------------------------

let huhText = "This sandwich is good.";
let fixRegex = /good/; // Change this line
let replaceText = "okey-dokey"; // Change this line
let result = huhText.replace(fixRegex, replaceText);


33. Remove Whitespace from Start and End--------------------------------------

let hello = "   Hello, World!  ";
let wsRegex = /^\s+|\s+$/g; // Change this line
let result = hello.replace(wsRegex,""); // Change this line
console.log();